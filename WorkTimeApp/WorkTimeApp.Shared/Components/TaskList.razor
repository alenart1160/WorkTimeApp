@using System.Text.Json
@using WorkTimeApp.Shared.Model
@using WorkTimeApp.Shared.Services

@inject NavigationManager Navigation
@inject ApiService ApiService
@foreach (TaskModel task in FilteredTasks.OrderByDescending(o => o.priority))
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title"> @task.title  </h5>
            <p class="card-text">@task.description</p>
            <p class="card-text"><small class="text-muted">Due date: @task.dueDate.ToString("dd-MM-yyyy")</small></p>
            <p class="card-text">
                <small class="text-muted">
                    Time passed:
                    @if (task.timePassed != null)
                    {
                        <span>@task.timePassed</span>
                    }
                    else
                    {
                        <span>00:00:00</span>
                    }
                </small>
            </p>

            @if (task.status == EnumStatus.InComplete)
            {
                <button @onclick="() => EditTask(task.id)">Edit</button>
                <button @onclick="() => StartTask(task)">Start</button>
                <button @onclick="() => CompleteTask(task)">Complete</button>
                <button @onclick="() => TaskHistory(task.id)">History</button>
            }
            @if (task.status == EnumStatus.Active)
            {
                <button @onclick="() => StopTask(task)">Stop</button>
                <button @onclick="() => TaskHistory(task.id)">History</button>
            }
            @if (task.status == EnumStatus.Completed)
            {
                <button @onclick="() => TaskHistory(task.id)">History</button>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int Userid { get; set; }

    [Parameter]
    public string Filter { get; set; } = string.Empty; // Ensure default value is provided

    [Parameter]
    public List<TaskModel> tasks { get; set; } = new(); // Corrected to property

    [Parameter]
    public Func<TaskModel, bool>? FilterFunc { get; set; }

    private IEnumerable<TaskModel> FilteredTasks =>
        FilterFunc is null ? tasks : tasks.Where(FilterFunc);


    static HttpClient httpClient = new HttpClient();

    private void EditTask(long TaskId)
    {
        Navigation.NavigateTo($"editTask/{TaskId}");
    }

    private void TaskHistory(long TaskId)
    {
        Navigation.NavigateTo($"tasks/history/{TaskId}");
    }

    private async void StartTask(TaskModel task)
    {
        task.status = EnumStatus.Active;
        task.timeStart = DateTime.Now;

        var result = await ApiService.PutProtectedDataAsync<TaskModel>("/api/tasks/", task);

    }

    private async void StopTask(TaskModel task)
    {
        task.status = EnumStatus.InComplete;

        TimeSpan existingTimePassed = TimeSpan.Zero;
        if (!string.IsNullOrEmpty(task.timePassed))
        {
            existingTimePassed = TimeSpan.Parse(task.timePassed);
        }

        TimeSpan timePassed = existingTimePassed + (DateTime.Now - task.timeStart);
        task.timePassed = timePassed.ToString(@"hh\:mm\:ss");

        TaskTimerModel taskTimerModel = new()
        {
            StartTime = task.timeStart,
            EndTime = DateTime.Now,
            TaskID = task.id,
            UserID = Userid,
            DateTimeCreated = DateTime.Now
        };
        var result1 = await ApiService.PutProtectedDataAsync<TaskModel>("/api/tasks/" + task.id, task);
        var result2 = await ApiService.PostProtectedDataAsync<TaskTimerModel>("/api/tasktimers/", taskTimerModel);

        // #if ANDROID
        //         var response = await httpClient.PutAsJsonAsync<TaskModel>($"http:10.0.2.2:5076/api/tasks/{task.id} ", task);
        //         var response2 = await httpClient.PostAsJsonAsync<TaskTimerModel>($"http:10.0.2.2:5076/api/tasktimers ", taskTimerModel);
        // #else
        //         var response = await httpClient.PutAsJsonAsync<TaskModel>($"http:localhost:5076/api/tasks/{task.id} ", task);
        //         var response2 = await httpClient.PostAsJsonAsync<TaskTimerModel>($"http:localhost:5076/api/tasktimers ", taskTimerModel);
        // #endif
    }

    private async void CompleteTask(TaskModel task)
    {
        task.status = EnumStatus.Completed;
        task.completed = true;
        var result = await ApiService.PutProtectedDataAsync<TaskModel>("/api/tasks/" + task.id, task);

    }
}
