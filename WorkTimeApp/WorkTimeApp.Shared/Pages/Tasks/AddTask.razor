@page "/addTask/{userid}"

@using Microsoft.AspNetCore.Components.Forms
@using WorkTimeApp.Shared.Model
@using WorkTimeApp.Shared.Services

@inject NavigationManager Navigation
@inject ApiService ApiService
@inject IJSRuntime JSRuntime

<PageTitle>Add Task</PageTitle>

<div class="form-container">
    <div class="card shadow">
        <div class="card-header bg-primary text-white d-flex align-items-center">
            <i class="bi bi-plus-circle me-2"></i>
            <h5 class="mb-0">Dodaj nowe zadanie</h5>
        </div>
        <div class="card-body">
            <EditForm Model="@task" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="Title" class="form-label">Tytuł:</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-pencil-square"></i></span>
                        <InputText id="title" @bind-Value="task.Title" class="form-control" placeholder="Wprowadź tytuł zadania" />
                    </div>
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Opis:</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-card-text"></i></span>
                        <InputTextArea id="description" @bind-Value="task.Description" class="form-control" placeholder="Dodaj opis zadania" />
                    </div>
                </div>

                <div class="mb-3">
                    <label for="dueDate" class="form-label">Termin realizacji:</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-calendar-event"></i></span>
                        <InputDate id="dueDate" @bind-Value="task.DueDate" class="form-control" />
                    </div>
                </div>

                <div class="mb-3">
                    <label for="priority" class="form-label">Priorytet:</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-flag-fill"></i></span>
                        <InputNumber id="priority" @bind-Value="task.Priority" class="form-control" />
                    </div>
                </div>

                <div class="d-flex justify-content-between">
                    <button type="submit" class="btn btn-success">
                        <i class="bi bi-check2-circle"></i> Zapisz
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="GoBack">
                        <i class="bi bi-arrow-left-circle"></i> Wróć
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">

<style>
    .form-container {
        max-width: 600px;
        margin: 30px auto;
    }

    .card {
        border-radius: 10px;
    }

    .card-header {
        font-size: 1.2rem;
        font-weight: 500;
    }

    .input-group-text {
        background-color: #f8f9fa;
    }

    .btn {
        min-width: 120px;
    }

        .btn i {
            margin-right: 6px;
        }
</style>

@code {
    [Parameter]
    public string Userid { get; set; } = null!;

    private TaskModel task = new TaskModel()
    {

        DueDate = DateTime.Now,
        DateTimeCreated = DateTime.Now,
        Status = EnumStatus.InComplete
    };

    static HttpClient httpClient = new HttpClient();
    public string dateNow = DateTime.Now.ToString("dd-MM-yyyy");

    private async void HandleValidSubmit()
    {
        task.UserID = Convert.ToInt64(Userid);
        await ApiService.PostProtectedDataAsync<TaskModel>("/api/tasks/", task);
        await JSRuntime.InvokeVoidAsync("history.back");
    }

    private async void GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
