@page "/tasks/completed/{userid:int}"

@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using WorkTimeApp.Shared.Model
@using WorkTimeApp.Shared.Services

@inject NavigationManager Navigation
@inject ApiService ApiService

<PageTitle>Zakończone Zadania</PageTitle>

<div class="container mt-4">
    <h2 class="text-success mb-3">
        <i class="bi bi-check2-circle"></i> Zakończone Zadania
    </h2>

    <p class="text-muted">Łącznie zakończonych: <strong>@tasks.Count(t => t.completed)</strong></p>

    @if (tasks.Any(t => t.completed))
    {
        <div class="task-cards">
            <WorkTimeApp.Shared.Components.TaskList tasks="@tasks" FilterFunc="CompletedFilter" Userid="@Userid"></WorkTimeApp.Shared.Components.TaskList>
        </div>
    }
    else
    {
        <div class="alert alert-info text-center">
            <i class="bi bi-info-circle"></i> Brak zakończonych zadań.
        </div>
    }
</div>

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">

<style>
    .task-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1rem;
    }

    h2 i {
        margin-right: 8px;
    }

    .alert {
        font-size: 1.1rem;
        padding: 1rem;
        border-radius: 8px;
    }
</style>

@code {
    [Parameter]
    public int Userid { get; set; }

    public List<TaskModel> tasks = new();

    private bool CompletedFilter(TaskModel task) => task.completed;

    protected override async Task OnInitializedAsync()
    {
        var result = await ApiService.GetProtectedDataAsync("/api/tasks/user/");
        if (!string.IsNullOrEmpty(result))
        {
            var deserializedTask = JsonSerializer.Deserialize<List<TaskModel>>(result);
            if (deserializedTask != null)
                tasks = deserializedTask;
        }
    }
}
