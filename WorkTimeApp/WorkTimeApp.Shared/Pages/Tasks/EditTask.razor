@page "/editTask/{taskid:int}"

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@inject NavigationManager Navigation
@inject UserModel UserModel
@inject ApiService ApiService
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using WorkTimeApp.Shared.Model
@using WorkTimeApp.Shared.Services

<PageTitle>Edit Task</PageTitle>

<h1>Editor</h1>


<EditForm Model="@task" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="title">Title:</label>
        <InputText id="title" @bind-Value="task.title" class="form-control" />
    </div>

    <div>
        <label for="description">Description:</label>
        <InputTextArea id="description" @bind-Value="task.description" class="form-control" />
    </div>

    <div>
        <label for="dueDate">Due Date:</label>
        <InputDate id="dueDate" @bind-Value="task.dueDate" class="form-control" />
    </div>

    <div>
        <label for="priority">Priority:</label>
        <InputNumber id="priority" @bind-Value="task.priority" class="form-control" />
    </div>
    <br />
    <input type="submit" class="btn btn-primary" value="Save" />
</EditForm>
<button class="btn btn-primary" @onclick="GoBack">Go Back</button>

@code {
    [Parameter]
    public int Taskid { get; set; }

    private TaskModel task = new TaskModel();
    static HttpClient httpClient = new HttpClient();

    protected override async Task OnInitializedAsync()
    {

        var result = await ApiService.GetProtectedDataWithoutUserIdAsync("/api/tasks/" + Taskid);

        if (!string.IsNullOrEmpty(result))
        {
            var deserializedTask = JsonSerializer.Deserialize<TaskModel>(result);
            if (deserializedTask != null)
            {
                task = deserializedTask;
            }
        }
    }

    private async void HandleValidSubmit()
    {
        var result = await ApiService.PutProtectedDataAsync<TaskModel>("/api/tasks/" + Taskid, task);

        await JSRuntime.InvokeVoidAsync("history.back");
    }

    private async void GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}

