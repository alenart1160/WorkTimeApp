@page "/editTask/{taskid:int}"

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@inject NavigationManager Navigation
@inject UserModel UserModel
@inject ApiService ApiService
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using WorkTimeApp.Shared.Model
@using WorkTimeApp.Shared.Services

<PageTitle>Edycja zadania</PageTitle>

<div class="d-flex justify-content-center align-items-center" >
    <div class="card shadow-lg p-4" style="max-width: 500px; width: 100%;">
        <div class="text-center mb-3">
            <h2 class="text-primary">
                <i class="bi bi-pencil-square"></i> Edytuj zadanie
            </h2>
            <p class="text-muted">Wprowadź zmiany i zapisz</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        <EditForm Model="@task" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="title" class="form-label">Tytuł</label>
                <InputText id="title" @bind-Value="task.title" class="form-control" placeholder="Wpisz tytuł" />
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Opis</label>
                <InputTextArea id="description" @bind-Value="task.description" class="form-control" placeholder="Dodaj opis" />
            </div>

            <div class="mb-3">
                <label for="dueDate" class="form-label">Termin</label>
                <InputDate id="dueDate" @bind-Value="task.dueDate" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="priority" class="form-label">Priorytet</label>
                <InputNumber id="priority" @bind-Value="task.priority" class="form-control" />
            </div>

            <div class="d-grid gap-2 mt-4">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-save"></i> Zapisz zmiany
                </button>
                <button type="button" class="btn btn-secondary" @onclick="GoBack">
                    <i class="bi bi-arrow-left"></i> Powrót
                </button>
            </div>
        </EditForm>
    </div>
</div>

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">


@code {
    [Parameter]
    public int Taskid { get; set; }

    private TaskModel task = new TaskModel();
    static HttpClient httpClient = new HttpClient();
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {

        var result = await ApiService.GetProtectedDataWithoutUserIdAsync("/api/tasks/" + Taskid);

        if (!string.IsNullOrEmpty(result))
        {
            var deserializedTask = JsonSerializer.Deserialize<TaskModel>(result);
            if (deserializedTask != null)
            {
                task = deserializedTask;
            }
        }
    }

    private async void HandleValidSubmit()
    {
        if (string.IsNullOrWhiteSpace(task.title))
        {
            errorMessage = "Tytuł jest wymagany.";
            return;
        }
        // Poprawka: DateTime nie może być null, więc sprawdzamy domyślną wartość
        if (task.dueDate == default(DateTime))
        {
            errorMessage = "Termin jest wymagany.";
            return;
        }
        var result = await ApiService.PutProtectedDataAsync<TaskModel>("/api/tasks/" + Taskid, task);

        await JSRuntime.InvokeVoidAsync("history.back");
    }

    private async void GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}

