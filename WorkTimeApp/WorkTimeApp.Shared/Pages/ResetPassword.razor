@page "/resetPassword"
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager Navigation

<PageTitle>Resetowanie hasła</PageTitle>

<div class="d-flex justify-content-center align-items-center">
    <div class="card shadow-lg p-4" style="max-width: 400px; width: 100%;">
        <div class="text-center mb-3">
            <h2 class="text-primary">
                <i class="bi bi-key"></i> Resetowanie hasła
            </h2>
            <p class="text-muted">Wpisz swój email, aby zresetować hasło</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert @(errorMessage.Contains("wysłany") ? "alert-success" : "alert-danger") text-center">
                @errorMessage
            </div>
        }

        <form @onsubmit="Submit">
            <div class="mb-3">
                <label class="form-label">Email</label>
                <input @bind="emailReset" type="email" class="form-control" placeholder="Wprowadź email" required />
            </div>
            <div class="d-grid">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-envelope"></i> Wyślij link resetujący
                </button>
            </div>
        </form>

        <div class="text-center mt-3">
            <button class="btn btn-link" @onclick="NavigateToLogin">
                <i class="bi bi-arrow-left"></i> Powrót do logowania
            </button>
        </div>
    </div>
</div>

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">

@code {
    private string? emailReset { get; set; }
    public string? errorMessage { get; set; }

    private static HttpClient httpClient = new();
    private readonly EmailRequest emailRequest = new();

    public async Task Submit()
    {
        if (string.IsNullOrEmpty(emailReset))
        {
            errorMessage = "Email jest wymagany.";
            return;
        }

        if (!emailReset.Contains("@") || !emailReset.Contains("."))
        {
            errorMessage = "Nieprawidłowy format email.";
            return;
        }

        emailRequest.To = emailReset;
        emailRequest.Subject = "Resetowanie hasła";
        emailRequest.Body = "Kliknij link, aby zresetować swoje hasło.";

        var baseUrl = Navigation.BaseUri.Contains("localhost")
            ? "http://localhost:5076/api/email"
            : "http://10.0.2.2:5076/api/email";

        try
        {
            var response = await httpClient.PostAsJsonAsync(baseUrl, emailRequest);
            if (response.IsSuccessStatusCode)
            {
                errorMessage = "Email resetujący został wysłany!";
            }
            else
            {
                errorMessage = "Wystąpił problem z wysłaniem emaila.";
            }
        }
        catch
        {
            errorMessage = "Nie udało się wysłać emaila. Sprawdź połączenie.";
        }
    }

    private void NavigateToLogin() => Navigation.NavigateTo("/");

    public class EmailRequest
    {
        public string? To { get; set; }
        public string Subject { get; set; } = string.Empty;
        public string Body { get; set; } = string.Empty;
    }
}
