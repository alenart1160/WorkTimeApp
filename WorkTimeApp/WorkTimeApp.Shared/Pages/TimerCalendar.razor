@page "/timerCalendar"
@using System.Text.Json
@using WorkTimeApp.Shared.Model
@using WorkTimeApp.Shared.Services
@inject ApiService ApiService

<style>
    .calendar-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .calendar {
        border-collapse: collapse;
        font-size: 1.2em;
    }

        .calendar th, .calendar td {
            width: 50px;
            height: 50px;
            text-align: center;
            padding: 5px;
            border: 1px solid #ccc;
            position: relative;
        }

        .calendar td {
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

    .calendar td.today {
        border: 2px solid red;
    }

    .calendar-buttons {
        text-align: center;
        margin-bottom: 10px;
    }

    .calendar-buttons button {
        margin: 0 5px;
        padding: 5px 10px;
        font-size: 1em;
    }

    .task-list {
        max-width: 400px;
        margin: 20px auto;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 8px;
    }

    .task-item {
        padding: 5px;
        border-bottom: 1px solid #eee;
    }

    .task-item:last-child {
        border-bottom: none;
    }

    .export-controls {
                display: flex;

        justify-content: center;
        gap: 10px;
        margin: 10px 0;
    }
</style>

<div class="calendar-container">
    <div>
        <div class="calendar-buttons">
            <button @onclick="PreviousYear">«</button>
            <button @onclick="PreviousMonth">‹</button>
            <span>@currentDate.ToString("MMMM yyyy")</span>
            <button @onclick="NextMonth">›</button>
            <button @onclick="NextYear">»</button>
        </div>

        <table class="calendar">
            <thead>
                <tr>
                    <th>Pn</th><th>Wt</th><th>Śr</th><th>Cz</th><th>Pt</th><th>So</th><th>Nd</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var week in GetWeeks())
                {
                    <tr>
                        @foreach (var day in week)
                        {
                            <td @onclick="() => SelectDate(day)"
                                style="background-color:@GetBackgroundColor(day)">
                                @day.Day
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>

        @if (selectedDate.HasValue)
        {
            <div class="task-list">
                <h4>Timery na @selectedDate.Value.ToShortDateString()</h4>
                @if (TimersForSelectedDate.Any())
                {
                    @foreach (var timer in TimersForSelectedDate)
                    {
                        <div class="task-item">
                           Start: @timer.StartTime.ToString("yyyy-MM-dd HH:mm") <br>
                           Koniec: @timer.EndTime.ToString("yyyy-MM-dd HH:mm")  <br>
                           Czas: @((timer.EndTime - timer.StartTime).ToString(@"hh\:mm\:ss"))
                        </div>
                    }
                }
                else
                {
                    <div>Brak timerów na ten dzień.</div>
                }
            </div>
        }

        <div class="export-controls">
            <InputDate @bind-Value="exportFrom" />
            <InputDate @bind-Value="exportTo" />
            
        </div>
        <div class="export-controls">

            <button @onclick="ExportToExcel">Eksportuj do Excela</button>      
        </div>

    </div>
</div>

@code {
    DateTime currentDate = DateTime.Today;
    DateTime today = DateTime.Today;
    DateTime? selectedDate = null;

    DateTime exportFrom = DateTime.Today.AddDays(-7);
    DateTime exportTo = DateTime.Today;

    List<TaskTimerModel> AllTimers = new();

    IEnumerable<TaskTimerModel> TimersForSelectedDate => selectedDate.HasValue
        ? AllTimers.Where(t => t.StartTime.Date == selectedDate.Value.Date)
        : Enumerable.Empty<TaskTimerModel>();

    void NextMonth() => currentDate = currentDate.AddMonths(1);
    void PreviousMonth() => currentDate = currentDate.AddMonths(-1);
    void NextYear() => currentDate = currentDate.AddYears(1);
    void PreviousYear() => currentDate = currentDate.AddYears(-1);

    void SelectDate(DateTime day)
    {
        selectedDate = day;
    }

    string GetBackgroundColor(DateTime day)
    {
        var total = AllTimers
            .Where(t => t.StartTime.Date == day.Date)
            .Aggregate(TimeSpan.Zero, (sum, t) => sum + (t.EndTime - t.StartTime));

        var hours = total.TotalHours;

        if (hours == 0) return "#e0f7e9"; // zielony jasny
        if (hours < 8) return "#b3e5fc";  // niebieski jasny
        if (hours < 10) return "#81d4fa"; // ciemniejszy niebieski
        return "#ff8a80"; // czerwony jasny
    }

    @code {
        // Add the required namespace for accessing FileSystem
        @using System.IO;
        @using ClosedXML.Excel
        
        async Task ExportToExcel()
        {
            var filtered = AllTimers
                .Where(t => t.StartTime.Date >= exportFrom.Date && t.StartTime.Date <= exportTo.Date)
                .OrderBy(t => t.StartTime)
                .ToList();

            // Replace FileSystem.AppDataDirectory with a valid directory path
            var appDataDirectory = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            var filePath = Path.Combine(appDataDirectory, $"TaskTimers_{exportFrom:yyyyMMdd}_{exportTo:yyyyMMdd}.xlsx");

            using var workbook = new ClosedXML.Excel.XLWorkbook();
            var ws = workbook.AddWorksheet("Timery");
            ws.Cell(1, 1).Value = "Lp.";
            ws.Cell(1, 2).Value = "TaskID";
            ws.Cell(1, 3).Value = "Start";
            ws.Cell(1, 4).Value = "Koniec";
            ws.Cell(1, 5).Value = "Czas trwania";

            for (int i = 0; i < filtered.Count; i++)
            {
                var t = filtered[i];
                ws.Cell(i + 2, 1).Value = i + 1;
                ws.Cell(i + 2, 2).Value = t.TaskID;
                ws.Cell(i + 2, 3).Value = t.StartTime.ToString("yyyy-MM-dd HH:mm");
                ws.Cell(i + 2, 4).Value = t.EndTime.ToString("yyyy-MM-dd HH:mm");
                ws.Cell(i + 2, 5).Value = (t.EndTime - t.StartTime).ToString(@"hh\:mm");
            }

            ws.Columns().AdjustToContents();
            workbook.SaveAs(filePath);

           // await Application.Current.MainPage.DisplayAlert("Eksport zakończony", $"Plik zapisano: {filePath}", "OK");
        }
    }
     protected override async Task OnInitializedAsync()
    {
        var result = await ApiService.GetProtectedDataWithoutUserIdAsync("/api/TaskTimers");

        if (!string.IsNullOrEmpty(result))
        {
            var deserializedTask = JsonSerializer.Deserialize<List<TaskTimerModel>>(result);
            if (deserializedTask != null)
            {
                AllTimers = deserializedTask;
            }

        }
    }
    IEnumerable<List<DateTime>> GetWeeks()
    {
        var firstOfMonth = new DateTime(currentDate.Year, currentDate.Month, 1);
        var firstDayInGrid = firstOfMonth.AddDays(-(int)(firstOfMonth.DayOfWeek == DayOfWeek.Sunday ? 6 : ((int)firstOfMonth.DayOfWeek - 1)));

        var weeks = new List<List<DateTime>>();
        var date = firstDayInGrid;

        while (true)
        {
            var week = Enumerable.Range(0, 7).Select(i => date.AddDays(i)).ToList();
            weeks.Add(week);

            if (week.Any(d => d.Month == currentDate.Month && d.Day == DateTime.DaysInMonth(currentDate.Year, currentDate.Month)))
                break;

            date = date.AddDays(7);
        }

        return weeks;
    }

}