@page "/"
@using Microsoft.AspNetCore.Components.Web
@using WorkTimeApp.Shared.Services
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using WorkTimeApp.Shared.Model

@inject NavigationManager Navigation
@inject UserModel UserModel
@inject ApiService ApiService
@inject WorkTime.Abstractions.IPlatformInfo PlatformInfo


<PageTitle>Home</PageTitle>

<h1>WorkTime App</h1>
<div style="display: flex; justify-content: center; align-items: center; height: 60vh; flex-direction: column;">
    <a>@errorMessage</a>
    <form method="post" @onsubmit="Submit" style="text-align: center;">
        <label>Login</label><br />
        <input @bind="Email" type="email" /><br />
        <label>Password</label><br />
        <input @bind="Password" type="password" /><br /><br />
        <div>
            <input type="submit" class="btn btn-primary" asp-page="/tasks" value="Login" />
        </div>
    </form><br />
    <button @onclick="NavigateToResetPassword" class="btn btn-secondary">Forget your password?</button><br />

    <button @onclick="NavigateToSignIn" class="btn btn-secondary">Sign in</button><br />


</div>

@code {
    protected override void OnInitialized()
    {
        UserModel.Id = 0;
    }


    static HttpClient httpClient = new();

    private string? Email { get; set; }
    private string? Password { get; set; }
    private string? errorMessage { get; set; }
    private async Task Submit()
    {
        if (string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(Password))
        {

            errorMessage = "Email and password are required.";
            return;
        }
        if (!Email.Contains("@") || !Email.Contains("."))
        {
            errorMessage = "Invalid Email format.";
            return;
        }
        else
        {
            errorMessage = null;
        }
        // Create a new user
        UserModel.Password = Password;
        UserModel.Email = Email;
        UserModel.Login = Email;

        var result = await ApiService.LoginAsync(UserModel);
        errorMessage = result ? "Zalogowano!" : "Błąd logowania";

        UserModel.Id = ApiService._id;
        
        Navigation.NavigateTo($"tasks/{UserModel.Id}");

    }

    private void NavigateToResetPassword() => Navigation.NavigateTo("resetPassword");
    private void NavigateToSignIn() => Navigation.NavigateTo("createAccount");




}
