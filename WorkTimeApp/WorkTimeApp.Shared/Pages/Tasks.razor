@page "/tasks/{userid}"
@inject NavigationManager Navigation

@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using WorkTimeApp.Shared.Model

<PageTitle>Active Tasks</PageTitle>

<h1>Active Tasks</h1>

<p role="status">Current active tasks: @tasks.Count(t => !t.completed)</p>

<button class="btn btn-primary" @onclick="AddTask">Add Task</button>
@if (tasks.Any())
{
    <div class="task-cards">
        @foreach (TaskModel task in tasks.OrderByDescending(o => o.priority))
        {
            if (!task.completed)
            {
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title"> @task.title  </h5>
                        <p class="card-text">@task.description</p>
                        <p class="card-text"><small class="text-muted">Due date: @task.dueDate.ToString("dd-MM-yyyy")</small></p>
                        <p class="card-text">
                            <small class="text-muted">
                                Time passed:
                                @if (task.timePassed != null)
                                {

                                    <span>@task.timePassed</span>
                                }
                                else
                                {
                                    <span>00:00:00</span>
                                }


                            </small>
                        </p>




                        @if (task.status == EnumStatus.InComplete)
                        {
                            <button @onclick="() => EditTask(task.id)">Edit</button>
                            <button @onclick="() => StartTask(task)">Start</button>
                            <button @onclick="() => CompleteTask(task)">Complete</button>
                            <button @onclick="() => TaskHistory(task.id)">History</button>



                        }
                        @if (task.status == EnumStatus.Active)
                        {
                            <button @onclick="() => StopTask(task)">Stop</button>
                            <button @onclick="() => TaskHistory(task.id)">History</button>

                        }

                    </div>
                </div>
            }
        }
    </div>
}
else
{
    <p>No tasks available.</p>
}

<style>
    .task-cards {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .card {
        width: 18rem;
        margin: 1rem;
    }

    .card-body {
        background-color: #f8f9fa;
        border-radius: 0.5rem;
        padding: 1rem;
    }
</style>

@code {
    [Parameter]
    public string Userid { get; set; } = null!;
    static HttpClient httpClient = new HttpClient();


    public List<TaskModel> tasks = new List<TaskModel>();
    // Example user ID, replace with actual user ID logic
    private DateTime dateTime = DateTime.Now; // Example date time, replace with actual date time logic
    private void AddTask()
    {

        // TasksModel newTask = new TasksModel("New Task", Int32.Parse(Userid), dateTime) { TaskName = "New Task", Completed = false };
        // tasks.Add(newTask);
        Navigation.NavigateTo("addTask/" + Userid);
    }

    protected override async Task OnInitializedAsync()
    {

#if ANDROID
        var response = await httpClient.GetStringAsync($"http://10.0.2.2:5076/api/tasks/user/{Userid}");
#else
        var response = await httpClient.GetStringAsync($"http://localhost:5076/api/tasks/user/{Userid}");
#endif
        if (!string.IsNullOrEmpty(response))
        {
            var deserializedTask = JsonSerializer.Deserialize<List<TaskModel>>(response);
            if (deserializedTask != null)
            {
                tasks = deserializedTask;
            }

        }
    }

    private void EditTask(long TaskId)
    {
        Navigation.NavigateTo($"editTask/{TaskId}");
    }
    private void TaskHistory(long TaskId)
    {
        Navigation.NavigateTo($"editTask/{TaskId}");
    }


    private async void StartTask(TaskModel task)
    {
        task.status = EnumStatus.Active;
        task.timeStart = DateTime.Now;

#if ANDROID
        var response = await httpClient.PutAsJsonAsync<TaskModel>($"http://10.0.2.2:5076/api/tasks/{task.id} ", task);
#else
        var response = await httpClient.PutAsJsonAsync<TaskModel>($"http://localhost:5076/api/tasks/{task.id} ", task);
#endif

    }



    private async void StopTask(TaskModel task)
    {
        task.status = EnumStatus.InComplete;

        // Ensure task.timePassed is not null before parsing
        TimeSpan existingTimePassed = TimeSpan.Zero;
        if (!string.IsNullOrEmpty(task.timePassed))
        {
            existingTimePassed = TimeSpan.Parse(task.timePassed);
        }

        TimeSpan timePassed = existingTimePassed + (DateTime.Now - task.timeStart);
        task.timePassed = timePassed.ToString(@"hh\:mm\:ss");

        TaskTimerModel taskTimerModel = new()
        {
            StartTime = task.timeStart,
            EndTime = DateTime.Now,
            TaskID = task.id,
            UserID = long.Parse(Userid),
            DateTimeCreated = DateTime.Now
        };

#if ANDROID
        var response = await httpClient.PutAsJsonAsync<TaskModel>($"http://10.0.2.2:5076/api/tasks/{task.id} ", task);
        var response2 = await httpClient.PostAsJsonAsync<TaskTimerModel>($"http://10.0.2.2:5076/api/tasktimers ", taskTimerModel);
#else
        var response = await httpClient.PutAsJsonAsync<TaskModel>($"http://localhost:5076/api/tasks/{task.id} ", task);
        var response2 = await httpClient.PostAsJsonAsync<TaskTimerModel>($"http://localhost:5076/api/tasktimers ", taskTimerModel);
#endif
    }



    private async void CompleteTask(TaskModel task)
    {
        task.status = EnumStatus.Completed;
        task.completed = true;



#if ANDROID
        var response = await httpClient.PutAsJsonAsync<TaskModel>($"http://10.0.2.2:5076/api/tasks/{task.id} ", task);
#else
        var response = await httpClient.PutAsJsonAsync<TaskModel>($"http://localhost:5076/api/tasks/{task.id} ", task);
#endif

    }
}
