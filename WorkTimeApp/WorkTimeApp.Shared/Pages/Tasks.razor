@page "/tasks/{userid}"
@inject NavigationManager Navigation

@using Microsoft.AspNetCore.Components
@using System.Text.Json
@using WorkTimeApp.Shared.Model

<PageTitle>Tasks</PageTitle>

<h1>Tasks</h1>

<p role="status">Current active tasks: @tasks.Count(t => !t.completed)</p>

<button class="btn btn-primary" @onclick="AddTask">Add Task</button>
@if (tasks.Any())
{
    <div class="task-cards">
        @foreach (TaskModel task in tasks)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title"> @task.title  </h5>
                    <p class="card-text">@task.description</p>
                    <p class="card-text"><small class="text-muted">Created: @task.dateTimeCreated</small></p>
                    <button @onclick="() => EditTask(task.id)">Edit</button>
                    <button @onclick="() => StartTask(task.id)">Start</button>
                    <button @onclick="() => StopTask(task.id)">Stop</button>
                    <button @onclick="() => CompleteTask(task.id)">Complete</button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No tasks available.</p>
}

<style>
    .task-cards {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .card {
        width: 18rem;
        margin: 1rem;
    }

    .card-body {
        background-color: #f8f9fa;
        border-radius: 0.5rem;
        padding: 1rem;
    }
</style>

@code {
    [Parameter]
    public string Userid { get; set; } = null!;
    static HttpClient httpClient = new HttpClient();


    public List<TaskModel> tasks = new List<TaskModel>();
    // Example user ID, replace with actual user ID logic
    private DateTime dateTime = DateTime.Now; // Example date time, replace with actual date time logic
    private void AddTask()
    {

        // TasksModel newTask = new TasksModel("New Task", Int32.Parse(Userid), dateTime) { TaskName = "New Task", Completed = false };
        // tasks.Add(newTask);
        Navigation.NavigateTo("addTask/" + Userid);
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await httpClient.GetStringAsync($"http://10.0.2.2:5076/api/tasks/user/{Userid}");
        if (!string.IsNullOrEmpty(response))
        {
            var deserializedTask = JsonSerializer.Deserialize<List<TaskModel>>(response);
            if (deserializedTask != null)
            {
                tasks = deserializedTask;
            }

        }
    }

    private void EditTask(long TaskId)
    {
        Navigation.NavigateTo($"editTask/{TaskId}");
    }
    private void StartTask(long TaskId)
    {
        Navigation.NavigateTo($"editTask/{TaskId}");
    }
    private void StopTask(long TaskId)
    {
        Navigation.NavigateTo($"editTask/{TaskId}");
    }
    private void CompleteTask(long TaskId)
    {
        Navigation.NavigateTo($"editTask/{TaskId}");
    }
}
