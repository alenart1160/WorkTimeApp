@page "/tasks"
@page "/tasks/{userid}"
@inject NavigationManager Navigation

@using Microsoft.AspNetCore.Components

<PageTitle>Tasks</PageTitle>

<h1>Tasks</h1>

<p role="status">Current active tasks: @tasks.Count(t => !t.Completed)</p>

<button class="btn btn-primary" @onclick="AddTask">Add Task</button>
@if (tasks.Any())
{
    <div class="task-cards">
        @foreach (TasksModel task in tasks)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@task.TaskName</h5>
                    <p class="card-text">@task.Description</p>
                    <p class="card-text"><small class="text-muted">Created: @task.DateTimeCreated</small></p>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No tasks available.</p>
}

<style>
    .task-cards {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    }

    .card {
    width: 18rem;
    margin: 1rem;
    }

    .card-body {
    background-color: #f8f9fa;
    border-radius: 0.5rem;
    padding: 1rem;
    }
</style>

@code {
    [Parameter]
    public string Userid { get; set; } 


    private List<TasksModel> tasks = new List<TasksModel>();
 // Example user ID, replace with actual user ID logic
    private DateTime dateTime = DateTime.Now; // Example date time, replace with actual date time logic
    private void AddTask()
    {
         string userIDTEST = Userid;
        // TasksModel newTask = new TasksModel("New Task", Int32.Parse(Userid), dateTime) { TaskName = "New Task", Completed = false };
        // tasks.Add(newTask);
        Navigation.NavigateTo("addTask/" + Userid);
    }


    public class TasksModel
    {
        public required string TaskName { get; set; }
        public int UserID { get; set; }
        public string? Description { get; set; }
        public DateTime DateTimeCreated { get; set; }
        public float TimePassed { get; set; }
        public bool Completed { get; set; }
        public TasksModel(string taskName, int userID, DateTime dateTime)
        {
            this.TaskName = taskName;
            this.UserID = userID;
            this.DateTimeCreated = dateTime;

        }


    }
    private int currentCount = 0;



}
