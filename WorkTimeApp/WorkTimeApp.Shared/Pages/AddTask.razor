@page "/addTask/{userid}"


@using Microsoft.AspNetCore.Components.Forms
@using WorkTimeApp.Shared.Model
@using WorkTimeApp.Shared.Services

@inject NavigationManager Navigation
@inject ApiService ApiService
@inject IJSRuntime JSRuntime

<PageTitle>Add Task</PageTitle>

<h1>Editor</h1>


<EditForm Model="@task" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="title">Title:</label>
        <InputText id="title" @bind-Value="task.title" class="form-control" />
    </div>

    <div>
        <label for="description">Description:</label>
        <InputTextArea id="description" @bind-Value="task.description" class="form-control" />
    </div>

    <div>
        <label for="dueDate">Due Date:</label>
        <InputDate id="dueDate" @bind-Value="task.dueDate" class="form-control"></InputDate>
    </div>

    <div>
        <label for="priority">Priority:</label>
        <InputNumber id="priority" @bind-Value="task.priority" class="form-control" />
    </div>
    <br />
    <input type="submit" class="btn btn-primary" value="Add Task" />
</EditForm>
<button class="btn btn-primary" @onclick="GoBack">Go Back</button>
@code {
    [Parameter]
    public string Userid { get; set; } = null!;
    private TaskModel task = new TaskModel()
    {

        dueDate = DateTime.Now,
        dateTimeCreated = DateTime.Now,
        status = EnumStatus.InComplete
    };

    static HttpClient httpClient = new HttpClient();
    public string dateNow = DateTime.Now.ToString("dd-MM-yyyy");

    private async void HandleValidSubmit()
    {
        task.userID = Convert.ToInt64(Userid);
        string UrlSuffix = "/api/tasks/";

        var result = await ApiService.PostProtectedDataAsync<TaskModel>(UrlSuffix, task);

       // var response = await httpClient.PostAsJsonAsync("http://localhost:5076/api/tasks", task);

        
       // var responseCode = response;
        await JSRuntime.InvokeVoidAsync("history.back");


    }
    private async void GoBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
    }
}
