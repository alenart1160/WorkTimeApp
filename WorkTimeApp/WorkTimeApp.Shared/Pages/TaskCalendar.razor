@page "/taskCalendar"
@using System.Text.Json
@using WorkTimeApp.Shared.Model
@using WorkTimeApp.Shared.Services
@inject ApiService ApiService

<style>
    .calendar-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
        font-family: Arial, sans-serif;
    }

    .calendar-buttons {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 8px;
        margin-bottom: 15px;
    }

    .calendar-title {
        font-weight: bold;
        font-size: 1.3rem;
        padding: 0 10px;
        color: #333;
    }

    .btn-nav {
        background-color: #4a90e2;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 8px 12px;
        font-size: 1.2rem;
        cursor: pointer;
        transition: background 0.3s;
    }

        .btn-nav:hover {
            background-color: #357abd;
        }

    .calendar {
        border-collapse: collapse;
        font-size: 1.1rem;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

        .calendar th {
            background: #4a90e2;
            color: white;
            padding: 10px;
        }

        .calendar td {
            width: 60px;
            height: 60px;
            text-align: center;
            padding: 5px;
            cursor: pointer;
            transition: background 0.3s;
            border: 1px solid #ddd;
            position: relative;
        }

            .calendar td:hover {
                background: rgba(0,0,0,0.05);
            }

    .selected {
        background-color: #4a90e2 !important;
        color: white !important;
    }

    .today {
        border: 2px solid #e53935 !important;
        font-weight: bold;
    }

    .other-month {
        color: #bbb;
    }

    .dot {
        width: 6px;
        height: 6px;
        background-color: #2196f3;
        border-radius: 50%;
        position: absolute;
        bottom: 6px;
        left: 50%;
        transform: translateX(-50%);
    }

    .task-list {
        max-width: 450px;
        margin: 20px auto;
        padding: 15px;
        border-radius: 8px;
        background: #fafafa;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    }

    .task-item {
        padding: 10px;
        border-bottom: 1px solid #ddd;
        font-size: 0.95rem;
    }

        .task-item:last-child {
            border-bottom: none;
        }

</style>
<div class="calendar-container">
    <div>
        <!-- Nawigacja -->
        <div class="calendar-buttons">
            <button class="btn-nav" @onclick="PreviousYear" title="Poprzedni rok">
                <i class="bi bi-chevron-double-left"></i>
            </button>
            <button class="btn-nav" @onclick="PreviousMonth" title="Poprzedni miesiąc">
                <i class="bi bi-chevron-left"></i>
            </button>

            <span class="calendar-title">@currentDate.ToString("MMMM yyyy", new System.Globalization.CultureInfo("pl-PL"))</span>
            <button class="btn-nav" @onclick="NextMonth" title="Następny miesiąc">
                <i class="bi bi-chevron-right"></i>
            </button>
            <button class="btn-nav" @onclick="NextYear" title="Następny rok">
                <i class="bi bi-chevron-double-right"></i>
            </button>
        </div>

        <!-- Kalendarz -->
        <table class="calendar">
            <thead>
                <tr>
                    <th>Pn</th>
                    <th>Wt</th>
                    <th>Śr</th>
                    <th>Cz</th>
                    <th>Pt</th>
                    <th>So</th>
                    <th>Nd</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var week in GetWeeks())
                {
                    <tr>
                        @foreach (var day in week)
                        {
                            <td class="@GetCellClass(day)"
                                @onclick="() => SelectDate(day)">
                                @day.Day
                                @if (HasTasks(day))
                                {
                                    <div class="dot"></div>
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>

        <!-- Lista zadań -->
        @if (selectedDate.HasValue)
        {
            <div class="task-list">
                <h4><i class="bi bi-list-task"></i> Zadania na @selectedDate.Value.ToShortDateString()</h4>
                @if (TasksForSelectedDate.Any())
                {
                    @foreach (var task in TasksForSelectedDate)
                    {
                        <div class="task-item">
                            <strong>@task.title</strong>
                            <span class="badge bg-primary ms-2">priorytet: @task.priority</span>
                            <span class="badge bg-secondary">
                                @(task.status == EnumStatus.Completed ? "Zakończony" : (task.status == EnumStatus.Active ? "Aktywny" : "Nie zakończony"))
                            </span>
                            <br />
                            <small>@task.description</small>
                        </div>
                    }
                }
                else
                {
                    <div><i class="bi bi-x-circle"></i> Brak zadań na ten dzień.</div>
                }
            </div>
        }
    </div>
</div>

@code {
    DateTime currentDate = DateTime.Today;
    DateTime today = DateTime.Today;
    DateTime? selectedDate = null;

    List<TaskModel> AllTasks = new();

    IEnumerable<TaskModel> TasksForSelectedDate => selectedDate.HasValue
        ? AllTasks.Where(t => t.dueDate == selectedDate.Value.Date)
        : Enumerable.Empty<TaskModel>();

    bool HasTasks(DateTime day)
    {
        return AllTasks.Any(t => t.dueDate == day.Date);
    }

    void NextMonth() => currentDate = currentDate.AddMonths(1);
    void PreviousMonth() => currentDate = currentDate.AddMonths(-1);
    void NextYear() => currentDate = currentDate.AddYears(1);
    void PreviousYear() => currentDate = currentDate.AddYears(-1);

    void SelectDate(DateTime day)
    {
        selectedDate = day;
    }

    string GetCellClass(DateTime day)
    {
        var classes = "";
        if (selectedDate.HasValue && day.Date == selectedDate.Value.Date)
            classes += "selected ";
        if (day.Date == today)
            classes += "today ";
        if (day.Month != currentDate.Month)
            classes += "text-muted ";
        return classes;
    }

  

    IEnumerable<List<DateTime>> GetWeeks()
    {
        var firstOfMonth = new DateTime(currentDate.Year, currentDate.Month, 1);
        var firstDayInGrid = firstOfMonth.AddDays(-(int)(firstOfMonth.DayOfWeek == DayOfWeek.Sunday ? 6 : ((int)firstOfMonth.DayOfWeek - 1)));

        var weeks = new List<List<DateTime>>();
        var date = firstDayInGrid;

        while (true)
        {
            var week = Enumerable.Range(0, 7).Select(i => date.AddDays(i)).ToList();
            weeks.Add(week);

            if (week.Any(d => d.Month == currentDate.Month && d.Day == DateTime.DaysInMonth(currentDate.Year, currentDate.Month)))
                break;

            date = date.AddDays(7);
        }

        return weeks;
    }
    protected override async Task OnInitializedAsync()
    {

        var result = await ApiService.GetProtectedDataAsync("/api/tasks/user/");

        if (!string.IsNullOrEmpty(result))
        {
            var deserializedTask = JsonSerializer.Deserialize<List<TaskModel>>(result);
            if (deserializedTask != null)
            {
                AllTasks = deserializedTask;
            }
        }
    }

}